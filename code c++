#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>

// Define pin numbers for sensors, actuators, and communication modules
#define TRAFFIC_SENSOR_PIN 2
#define EMERGENCY_VEHICLE_PIN 3
#define TRAFFIC_LIGHT_GREEN_PIN 4
#define TRAFFIC_LIGHT_RED_PIN 5
#define GPS_SERIAL_RX_PIN 6
#define GPS_SERIAL_TX_PIN 7

// Define Wi-Fi credentials
#define WIFI_SSID "your_wifi_ssid"
#define WIFI_PASSWORD "your_wifi_password"

// Define server parameters
#define SERVER_PORT 80

WebServer server(SERVER_PORT);

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(115200);

  // Initialize GPIO pins
  pinMode(TRAFFIC_SENSOR_PIN, INPUT);
  pinMode(EMERGENCY_VEHICLE_PIN, INPUT);
  pinMode(TRAFFIC_LIGHT_GREEN_PIN, OUTPUT);
  pinMode(TRAFFIC_LIGHT_RED_PIN, OUTPUT);

  // Connect to Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Start the web server
  server.begin();
}

void loop() {
  // Handle client requests
  server.handleClient();

  // Read sensor data
  bool trafficDetected = digitalRead(TRAFFIC_SENSOR_PIN);
  bool emergencyVehicleApproaching = digitalRead(EMERGENCY_VEHICLE_PIN);

  // Control traffic lights
  if (emergencyVehicleApproaching) {
    // Emergency vehicle approaching, give priority
    controlTrafficLights(true);
  } else {
    // Normal traffic flow management
    controlTrafficLights(trafficDetected);
  }
}

void controlTrafficLights(bool trafficDetected) {
  if (trafficDetected) {
    // Traffic detected, stop traffic flow
    digitalWrite(TRAFFIC_LIGHT_GREEN_PIN, LOW);
    digitalWrite(TRAFFIC_LIGHT_RED_PIN, HIGH);
  } else {
    // No traffic detected, allow traffic flow
    digitalWrite(TRAFFIC_LIGHT_GREEN_PIN, HIGH);
    digitalWrite(TRAFFIC_LIGHT_RED_PIN, LOW);
  }
}
